(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["routing"],{"0c73":function(e,t,a){},"20fc":function(e,t,a){"use strict";a.r(t);var o=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("v-container",[a("h1",{staticClass:"text-center display-2 mb-10"},[e._v("Router")]),a("p",[e._v(e._s(e.text1)),a("code",{staticClass:"hljs d-inline"},[e._v('router-link(to="/") Home')]),e._v(e._s(e.text2)),a("highlightjs",{attrs:{language:"javascript",code:e.nav}}),e._v(e._s(e.routerFile)),a("highlightjs",{attrs:{language:"javascript",code:e.routerLogic}}),e._v(e._s(e.webpackChunkName)),a("code",{staticClass:"hljs d-inline"},[e._v('mode: "history"')]),e._v(e._s(e.historyMode)),a("code",{staticClass:"hljs d-inline"},[e._v("goBack() { return this.$router.go(-1); }")]),e._v(" (Creating a Go-Back Button - A Vue.Js Lesson From Our Vue.Js..., n.d.)")],1)])],1)},n=[],i={name:"Routing",data:function(){return{text1:"Vue creates a one-page application. In order to have multiple sites, \n    routing by the Vue Router is required. Hence the navigation can be implemented \n    with the router-link tag: ",text2:". It is advisable to make the \n    navigation links dynamic to provide clarity and maintainability. That means that \n    all navigation links except the default link are extracted into an Array or a \n    separate document, which is then imported. In this example the Vuetify-tabs were \n    used instead of the router-link tag.",nav:'TheNavigation.vue\nv-tabs \n  v-tab(to="/") Home\n  v-tab(v-for="view in views" :key="view.to.name" :to="view.to").links {{ view.tag }}\nimport navItems from "./navItems.json";\ndata() { return { views: navItems, }; }\nnavItems.json: \n[ { "tag": "About", "to": { "name": "about" } }, … ]',routerFile:"The router logic is comprised in router.js, where the navigation links \n    are connected to the corresponding view or respectively site by passing the property to.",routerLogic:'import Home from "./views/Home.vue";\nconst routes = [{ path: "/", name: "Home", component: Home, }, \n{ path: "/about", name: "About", component: () => import(/* webpackChunkName: "filename" */ "./views/About.vue"), }, … ];',webpackChunkName:"The default view “Home” is directly imported and loaded. \n    The other components use lazy loading to drastically improve performance: \n    In contrast to the main view, they are dynamically imported once their use is requested. \n    This route level code-splitting separates the JS into chunk files (cf. Vue-Devtools under \n    Network, JS), which can be named with the webpackChunkName comment. \n\n    For a 404 page, the path would use the wildcard “*” to match all possible file paths and is \n    listed at the end of the routes so that the router does not match the 404 page unintentionally \n    (How to Create a 404 Not Found Route and Page with Vue Router - A..., n.d.). \n\n    The default router mode is hash-mode, which uses a URL hash to reflect the URL so that a \n    complete page reload is avoided. Switching to history-mode by adding ",historyMode:" port of VueRouter resolves the hashtag (“…/#/”) in the URL path and \n    still avoids page reload because of the history.pushState API (How to Pass Vue Router Params \n    as Props to Components - A Vue.Js..., n.d.). In history mode it is simple to go to the previous \n    page, because of the history stack: "}}},s=i,r=(a("dd3d"),a("2877")),h=a("6544"),u=a.n(h),d=a("a523"),c=Object(r["a"])(s,o,n,!1,null,"df8180a0",null);t["default"]=c.exports;u()(c,{VContainer:d["a"]})},dd3d:function(e,t,a){"use strict";var o=a("0c73"),n=a.n(o);n.a}}]);
//# sourceMappingURL=routing.846f68e9.js.map